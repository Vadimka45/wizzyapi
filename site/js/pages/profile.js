import { api } from '../api.js';
import { getUser, logout } from '../auth.js';
import { toast } from '../ui/toast.js';

const u = getUser();
const params = new URLSearchParams(location.search);
let id = params.get('id');
const isAdmin = u.role === 'admin' || u.role === 'owner';
if (!id || (!isAdmin && id != u.id)) id = u.id;

const pName = document.getElementById('pName');
const pRole = document.getElementById('pRole');
const pId = document.getElementById('pId');
const pStatus = document.getElementById('pStatus');
const avatar = document.getElementById('profileAvatar');
const btnLogout = document.getElementById('btnLogout');
const btnEdit = document.getElementById('btnEdit');
const tabActions = document.getElementById('tabActions');
const tabSessions = document.getElementById('tabSessions');
const tabContent = document.getElementById('tabContent');
const modal = document.getElementById('profileModal');

const roleIcons = {
  user: 'üë§',
  helper: 'üõ°Ô∏è',
  admin: 'üõë',
  owner: 'üëë'
};
const roleNames = {
  user: 'User',
  helper: 'Helper',
  admin: 'Admin',
  owner: 'Owner'
};

async function loadProfile() {
  try {
    const res = await api.request('/profile/me', { method: 'GET', body: { username: u.username } });
    const user = res.user;
    pName.textContent = user.name || user.username;
    pRole.textContent = roleIcons[user.role] || '';
    pRole.className = 'role-badge ' + user.role;
    pId.textContent = user.id;
    pStatus.textContent = user.status === 'online' ? 'üü¢ –í —Å–µ—Ç–∏' : 'üî¥ –ù–µ –≤ —Å–µ—Ç–∏';
    avatar.textContent = user.avatar || roleIcons[user.role] || 'üë§';
    if (isAdmin) btnEdit.style.display = '';
    else btnEdit.style.display = 'none';
  } catch (e) {
    toast.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
  }
}

btnLogout.onclick = () => { logout(); location.href = '/login'; };
btnEdit.onclick = () => openEditModal();

tabActions.onclick = (e) => { selectTab('actions'); };
tabSessions.onclick = (e) => { selectTab('sessions'); };

function selectTab(tab) {
  document.querySelectorAll('.tab-link').forEach(t => t.classList.remove('active'));
  if (tab === 'actions') {
    tabActions.classList.add('active');
    loadActions();
  } else {
    tabSessions.classList.add('active');
    loadSessions();
  }
}

async function loadActions() {
  tabContent.innerHTML = '<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
  try {
    const res = await api.request('/admin/actions', { method: 'GET', body: { admin: u.username, limit: 20 } });
    if (!res.actions || !res.actions.length) {
      tabContent.innerHTML = '<div>–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π</div>';
      return;
    }
    tabContent.innerHTML = `<table class="users-table"><thead><tr><th>ID</th><th>Action</th><th>Details</th><th>Time</th></tr></thead><tbody>${res.actions.map(a => `<tr><td>${a.id}</td><td>${a.action}</td><td>${a.details}</td><td>${a.created_at}</td></tr>`).join('')}</tbody></table>`;
  } catch (e) {
    tabContent.innerHTML = '<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π</div>';
  }
}

async function loadSessions() {
  tabContent.innerHTML = '<div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π (–∑–∞–≥–ª—É—à–∫–∞)
  setTimeout(() => {
    tabContent.innerHTML = `<table class="users-table"><thead><tr><th>–°—Ç–∞—Ç—É—Å</th><th>–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ</th><th>–õ–æ–∫–∞—Ü–∏—è</th><th>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</th><th>–î–µ–π—Å—Ç–≤–∏–µ</th></tr></thead><tbody>
      <tr><td><span style="color:#10b981">–¢–µ–∫—É—â–∞—è</span></td><td>–ö–æ–º–ø—å—é—Ç–µ—Ä - Opera</td><td>–®–≤–µ—Ü–∏—è, –°—Ç–æ–∫–≥–æ–ª—å–º</td><td>2025-06-29 08:31:01</td><td><button class="btn hover-gradient">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button></td></tr>
      <tr><td><span style="color:#10b981">–¢–µ–∫—É—â–∞—è</span></td><td>–ö–æ–º–ø—å—é—Ç–µ—Ä - Opera</td><td>–†–æ—Å—Å–∏—è, –°–º–æ–ª–µ–Ω—Å–∫</td><td>2025-06-28 23:19:48</td><td><button class="btn hover-gradient">–ó–∞–≤–µ—Ä—à–∏—Ç—å</button></td></tr>
    </tbody></table>`;
  }, 800);
}

function openEditModal() {
  modal.style.display = 'flex';
  modal.innerHTML = `<div class="modal-box"><h3>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
    <label>–ò–º—è: <input id="editName" value="${pName.textContent}" /></label>
    <label>–†–æ–ª—å: <select id="editRole">
      <option value="user">User</option>
      <option value="helper">Helper</option>
      <option value="admin">Admin</option>
      <option value="owner">Owner</option>
    </select></label>
    <button class="btn hover-gradient" id="saveEdit">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
    <button class="btn" id="closeEdit">–û—Ç–º–µ–Ω–∞</button>
  </div>`;
  document.getElementById('closeEdit').onclick = () => { modal.style.display = 'none'; };
  document.getElementById('saveEdit').onclick = async () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    toast.success('–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞)');
    modal.style.display = 'none';
    loadProfile();
  };
}

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ
modal.onclick = (e) => { if (e.target === modal) modal.style.display = 'none'; };

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
loadProfile();
selectTab('actions'); 